#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author：ShidongDu time:2020/2/5
'''
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
'''
from typing import List
class Solution:
    # dp[i][k][0]   dp[i][k][1] k表示最大可以买入卖出的次数，本题中k等于1
    #base case：
    # dp[-1][k][0] = dp[i][0][0] = 0
    # dp[-1][k][1] = dp[i][0][1] = -infinity
    #
    # 状态转移方程：
    # dp[i][k][0] = max(dp[i-1][k][0], dp[i-1][k][1] + prices[i])
    # dp[i][k][1] = max(dp[i-1][k][1], dp[i-1][k-1][0] - prices[i])

    def maxProfit(self, prices: List[int]) -> int:
        dp = [[]]
        dp[-1][0] = 0   # 解释：因为i是从第0天开始的，所以第-1天还没开始，利润当然是0
        dp[-1][1] = float('-inf')   # 解释：第-1天还没开始，不可能持有股票，所以用负无穷表示
