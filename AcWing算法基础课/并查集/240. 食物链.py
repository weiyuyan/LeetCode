#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author：ShidongDu time:2020/3/17
'''
动物王国中有三类动物A,B,C，这三类动物的食物链构成了有趣的环形。

A吃B， B吃C，C吃A。

现有N个动物，以1－N编号。

每个动物都是A,B,C中的一种，但是我们并不知道它到底是哪一种。

有人用两种说法对这N个动物所构成的食物链关系进行描述：

第一种说法是”1 X Y”，表示X和Y是同类。

第二种说法是”2 X Y”，表示X吃Y。

此人对N个动物，用上述两种说法，一句接一句地说出K句话，这K句话有的是真的，有的是假的。

当一句话满足下列三条之一时，这句话就是假话，否则就是真话。

1） 当前的话与前面的某些真的话冲突，就是假话；
2） 当前的话中X或Y比N大，就是假话；
3） 当前的话表示X吃X，就是假话。

你的任务是根据给定的N和K句话，输出假话的总数。

输入格式
第一行是两个整数N和K，以一个空格分隔。

以下K行每行是三个正整数 D，X，Y，两数之间用一个空格隔开，其中D表示说法的种类。

若D=1，则表示X和Y是同类。

若D=2，则表示X吃Y。

输出格式
只有一个整数，表示假话的数目。

数据范围
1≤N≤50000,
0≤K≤100000
输入样例：
100 7
1 101 1
2 1 2
2 2 3
2 3 3
1 1 3
2 3 1
1 5 5
输出样例：
3
'''
# 思路：将所有有关系的动物放在一个集合里（x和y是同类，x把z吃，q把x吃等等）放到同一个集合里去
# 至于具体集合中两个点的关系是什么，我们可以将它们与根节点比较
# 每个点到根节点的距离：
# 余数1，表示可以吃掉根节点
# 余数2，表示可以被根节点吃掉
# 余数0，表示它和根节点同类
def find(x):
    if p[x] != x:
        t = find(p[x])
        d[x] += d[p[x]]
        p[x] = t
    return p[x]

if __name__ == '__main__':
    n, m = list(map(int, input().split()))  # n个数，m个操作
    p = [0]+[i for i in range(1, n+1)]
    d = [0]*(n+1)
    res = 0
    while(m):
        m-=1
        t, x, y = list(map(int, input().split()))
        if x>n or y>n:
            res += 1
        else:
            px = find(x)
            py = find(y)
            if t==1:    # 同类判断
                if(px==py and (d[x]-d[y])%3):
                    res+=1  # 假话
                elif px!=py:
                    p[px] = py
                    d[px] = d[y]-d[x]
            else:   # x吃y
                if(px==py and (d[x]-d[y]-1)%3):
                    res += 1
                elif px!=py:
                    p[px] = py
                    d[px] = d[y]+1-d[x]
    print(res)

