#!/usr/bin/env python
# -*- coding: utf-8 -*-
# author：ShidongDu time:2020/4/18
'''
某个程序本来应该输出一个整数数组。但是这个程序忘记输出空格了以致输出了一个数字字符串，我们所知道的信息只有：数组中所有整数都在 [1, k] 之间，且数组中的数字都没有前导 0 。

给你字符串 s 和整数 k 。可能会有多种不同的数组恢复结果。

按照上述程序，请你返回所有可能输出字符串 s 的数组方案数。

由于数组方案数可能会很大，请你返回它对 10^9 + 7 取余 后的结果。

示例 1：

输入：s = "1000", k = 10000
输出：1
解释：唯一一种可能的数组方案是 [1000]
示例 2：

输入：s = "1000", k = 10
输出：0
解释：不存在任何数组方案满足所有整数都 >= 1 且 <= 10 同时输出结果为 s 。
示例 3：

输入：s = "1317", k = 2000
输出：8
解释：可行的数组方案为 [1317]，[131,7]，[13,17]，[1,317]，[13,1,7]，[1,31,7]，[1,3,17]，[1,3,1,7]
示例 4：

输入：s = "2020", k = 30
输出：1
解释：唯一可能的数组方案是 [20,20] 。 [2020] 不是可行的数组方案，原因是 2020 > 30 。 [2,020] 也不是可行的数组方案，因为 020 含有前导 0 。
示例 5：

输入：s = "1234567890", k = 90
输出：34

提示：

1 <= s.length <= 10^5.
s 只包含数字且不包含前导 0 。
1 <= k <= 10^9.
'''
# 动态规划：
# 状态表示：①集合：dp[i]表示只看前i个数字能组成的组合的集合  ②属性：count
# 状态计算：dp[i] = dp[i-1](a[i] <= k 且 a[i] != 0) + dp[i-2](a[i-1]*10 + a[i] <= k且a[i-1]!=0 ....)

# 宝宝心里苦。。。。妈的
# 差三分钟就做完了，在一个测试用例上耽误了五分钟，原因是没有仔细读题，人家让对 10^9 + 7 取余，我特喵没看到啊啊啊啊啊啊啊啊啊大大啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊我
# 我尼玛傻了
class Solution:
    def numberOfArrays(self, s: str, k: int) -> int:
        dp = [0 for _ in range(len(s)+1)]
        len_k = len(str(k))

        # 这是为了防止那种傻逼的1000000000000...000000000000000000000000000000然后k = 100000000的傻逼傻逼傻逼用例出现打扰老子！
        if int(s[-len_k:]) == 0:
            return 0

        # 初始化一下
        dp[0] = 1
        for l in range(1, len(dp)):
            if int(s[l-1]) != 0 and int(s[l-1]) <= k:
                dp[l] = 1
                break

        for i in range(l+1, len(dp)):
            j = i-1
            tmp = int(s[j])
            while tmp <= k and j>=0:
                if int(s[j]) == 0:
                    j -= 1
                    tmp = int(s[j:i]) if s[j:i] else 0
                    continue
                dp[i] += dp[j]
                j -= 1
                tmp = int(s[j:i]) if s[j:i] else 0
                dp[i] %= 1000000007
        return dp[-1]

if __name__ == '__main__':
    solution = Solution()
    s = "1000000000000"
    k = 10
    res = solution.numberOfArrays(s, k)
    print(res)

